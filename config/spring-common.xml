<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

	<!-- 数据库配置 -->
	<context:property-placeholder location="classpath:mysql.properties" />

	<!-- 配置数据源 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- 配置SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 配置Hibernate方言、SQL显示 -->
		<!-- 配置Hibernate属性 -->
		<property name="hibernateProperties">
			<props>
				<!-- 数据库方言 -->
				<!-- SQLSERVER <prop key="hibernate.dialect">org.hibernate.dialect.SQLServerDialect</prop> -->
				<!-- MySQL -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<!-- 此处必须配置由Spring提供的SessionContext,否则无法切入事务管理,会引发异常 -->
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext
				</prop>
				<!-- 二级缓存 -->
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory
				</prop>
				<!-- 二级缓存统计 -->
				<prop key="hibernate.generate_statistics">true</prop>
				<!-- 使用结构化方式维护缓存项 -->
				<prop key="hibernate.cache.use_structured_entries">true</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>

		<!-- 设置需要扫描实体的Package -->
		<property name="packagesToScan">
			<list>
				<value>com.mcx.*..*.model</value>
			</list>
		</property>

		<!-- 配置实体类 -->
		<property name="annotatedClasses">
			<list>
				<value>com.mcx.model.User</value>
				<value>com.mcx.model.Dorm</value>
				<value>com.mcx.model.Floor</value>
				<value>com.mcx.model.Charge</value>
				<value>com.mcx.model.Discipline</value>
				<value>com.mcx.model.Hygiene</value>
				<value>com.mcx.model.InAndOut</value>
				<value>com.mcx.model.Lostproperty</value>
				<value>com.mcx.model.Notice</value>
			</list>
		</property>

	</bean>

	<!-- 由Srping提供的一个用于支持原生SQL查询的支持类 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	    <property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 事务管理器配置 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
	    <property name="dataSource" ref="dataSource" />
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>




	<!-- 配置事务管理器的管理方法 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 定义事物属性 -->
		<tx:attributes>
			<!-- 配置只读事务方法 -->
			<tx:method name="get*" read-only="true" timeout="5000" />
			<tx:method name="find*" read-only="true" timeout="5000" />
			<!-- 一般方法隔离级别和REQUIRED传播级别 -->
			<tx:method name="*" isolation="DEFAULT" propagation="REQUIRED"
				timeout="5000" />
		</tx:attributes>
	</tx:advice>



	<!-- 配置事务的的切点AOP，并把事务属性与切点关联起来 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut expression="execution(* com.mcx.service.impl.*.*(..))"
			id="pointcut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut" />
	</aop:config>



	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>